# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Job(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, start_time: datetime=None, url: str=None, keywords: List[str]=None, status: str=None, url_type: str=None):  # noqa: E501
        """Job - a model defined in Swagger

        :param id: The id of this Job.
        :type id: int
        :param start_time: The start_time of this Job.
        :type start_time: datetime
        :param url: The url of this Job.  # noqa: E501
        :type url: str
        :param keywords: The keywords of this Job.
        :type keywords: List[str]
        :param status: The status of this Job.
        :type status: str
        :param url_type: The url_type of this Job.
        :type url_type: str
        """
        self.swagger_types = {
            'id': int,
            'start_time': datetime,
            'url': str,
            'keywords': List[str],
            'status': str,
            'url_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'start_time': 'startTime',
            'url': 'url',
            'keywords': 'keywords',
            'status': 'status',
            'url_type': 'urlType'
        }

        self._id = id
        self._start_time = start_time
        self._url = url
        self._keywords = keywords
        self._status = status
        self._url_type = url_type

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Job of this Job.
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Job.

        :return: The id of this Job.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Job.

        :param id: The id of this Job.
        :type id: int
        """

        self._id = id

    @property
    def start_time(self) -> datetime:
        """Gets the start_time of this Job.

        :return: The start_time of this Job.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: datetime):
        """Sets the start_time of this Job.

        :param start_time: The start_time of this Job.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def url(self) -> str:
        """Gets the url of this Job.

        :return: The url of this Job.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Job.

        :param url: The url of this Job.
        :type url: str
        """

        self._url = url

    @property
    def keywords(self) -> List[str]:
        """Gets the keywords of this Job.

        :return: The keywords of this Job.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords: List[str]):
        """Sets the keywords of this Job.

        :param keywords: The keywords of this Job.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def status(self) -> str:
        """Gets the status of this Job.

        status of the job

        :return: The status of this Job.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Job.

        status of the job

        :param status: The status of this Job.
        :type status: str
        """
        allowed_values = ["error", "processing", "done"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def url_type(self) -> str:
        """Gets the url_type of this Job.

        type of the url

        :return: The url_type of this Job.
        :rtype: str
        """
        return self._url_type

    @url_type.setter
    def url_type(self, url_type: str):
        """Sets the url_type of this Job.

        type of the url

        :param url_type: The url_type of this Job.
        :type url_type: str
        """
        allowed_values = ["live", "video"]
        if url_type not in allowed_values:
            raise ValueError(
                "Invalid value for `url_type` ({0}), must be one of {1}"
                .format(url_type, allowed_values)
            )

        self._url_type = url_type
