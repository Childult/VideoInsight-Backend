# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Result(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, audio: str=None, t_abstract: str=None, v_abstract: List[str]=None, v_text: str=None):  # noqa: E501
        """Result - a model defined in Swagger

        :param id: The id of this Result.
        :type id: int
        :param audio: The audio of this Result.
        :type audio: str
        :param t_abstract: The t_abstract of this Result.
        :type t_abstract: str
        :param v_abstract: The v_abstract of this Result.
        :type v_abstract: List[str]
        :param v_text: The v_text of this Result.
        :type v_text: str
        """
        self.swagger_types = {
            'id': int,
            'audio': str,
            't_abstract': str,
            'v_abstract': List[str],
            'v_text': str
        }

        self.attribute_map = {
            'id': 'id',
            'audio': 'audio',
            't_abstract': 'tAbstract',
            'v_abstract': 'vAbstract',
            'v_text': 'vText'
        }

        self._id = id
        self._audio = audio
        self._t_abstract = t_abstract
        self._v_abstract = v_abstract
        self._v_text = v_text

    @classmethod
    def from_dict(cls, dikt) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Result of this Result.
        :rtype: Result
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Result.

        :return: The id of this Result.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Result.

        :param id: The id of this Result.
        :type id: int
        """

        self._id = id

    @property
    def audio(self) -> str:
        """Gets the audio of this Result.

        :return: The audio of this Result.
        :rtype: str
        """
        return self._audio

    @audio.setter
    def audio(self, audio: str):
        """Sets the audio of this Result.

        :param audio: The audio of this Result.
        :type audio: str
        """

        self._audio = audio

    @property
    def t_abstract(self) -> str:
        """Gets the t_abstract of this Result.

        :return: The t_abstract of this Result.
        :rtype: str
        """
        return self._t_abstract

    @t_abstract.setter
    def t_abstract(self, t_abstract: str):
        """Sets the t_abstract of this Result.

        :param t_abstract: The t_abstract of this Result.
        :type t_abstract: str
        """

        self._t_abstract = t_abstract

    @property
    def v_abstract(self) -> List[str]:
        """Gets the v_abstract of this Result.

        :return: The v_abstract of this Result.
        :rtype: List[str]
        """
        return self._v_abstract

    @v_abstract.setter
    def v_abstract(self, v_abstract: List[str]):
        """Sets the v_abstract of this Result.

        :param v_abstract: The v_abstract of this Result.
        :type v_abstract: List[str]
        """

        self._v_abstract = v_abstract

    @property
    def v_text(self) -> str:
        """Gets the v_text of this Result.

        :return: The v_text of this Result.
        :rtype: str
        """
        return self._v_text

    @v_text.setter
    def v_text(self, v_text: str):
        """Sets the v_text of this Result.

        :param v_text: The v_text of this Result.
        :type v_text: str
        """
        self._v_text = v_text
