---
swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about\
    \     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\
    \ #swagger](http://swagger.io/irc/).      For this sample, you can use the api\
    \ key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "job"
  description: "Operations about job"
- name: "user"
  description: "Operations about user"
- name: "result"
  description: "Operations about result"
schemes:
- "https"
- "http"
paths:
  /job:
    post:
      tags:
      - "job"
      summary: "Create a new job"
      description: ""
      operationId: "add_job"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Job"
      responses:
        "405":
          description: "Invalid input"
      x-swagger-router-controller: "swagger_server.controllers.job_controller"
  /job/findByStatus:
    get:
      tags:
      - "job"
      summary: "Finds jobs by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "find_jobs_by_status"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "error"
          - "processing"
          - "done"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Job"
        "400":
          description: "Invalid status value"
      x-swagger-router-controller: "swagger_server.controllers.job_controller"
  /job/{jobId}:
    get:
      tags:
      - "job"
      summary: "Find job by ID"
      description: "Returns a single job"
      operationId: "get_job_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "jobId"
        in: "path"
        description: "ID of job to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Job"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Job not found"
      x-swagger-router-controller: "swagger_server.controllers.job_controller"
  /result/{resultId}:
    get:
      tags:
      - "result"
      summary: "Get result by ID"
      description: "Returns a single result of a job"
      operationId: "get_result_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "resultId"
        in: "path"
        description: "ID of result that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Result"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Result not found"
      x-swagger-router-controller: "swagger_server.controllers.result_controller"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "create_user"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "login_user"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logout_user"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
definitions:
  Result:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      audio:
        type: "string"
      tAbstract:
        type: "string"
      vAbstract:
        type: "array"
        items:
          type: "string"
      vText:
        type: "string"
    example:
      tAbstract: "tAbstract"
      vText: "vText"
      vAbstract:
      - "vAbstract"
      - "vAbstract"
      id: 0
      audio: "audio"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
  Job:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      startTime:
        type: "string"
        format: "date-time"
      url:
        type: "string"
      keywords:
        type: "array"
        items:
          type: "string"
      status:
        type: "string"
        description: "status of the job"
        enum:
        - "error"
        - "processing"
        - "done"
      urlType:
        type: "string"
        description: "type of the url"
        enum:
        - "live"
        - "video"
    example:
      urlType: "live"
      keywords:
      - "keywords"
      - "keywords"
      startTime: "2000-01-23T04:56:07.000+00:00"
      id: 0
      url: "url"
      status: "error"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
